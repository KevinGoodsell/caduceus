#!/usr/bin/env python

'''
Generate a formatted list of error numbers, names, and description for use in
STAF/_errors.py
'''

import sys
import re

import STAF

def read_errors(text):
    block_re = re.compile(r'typedef enum STAFError_e.*?STAFError_t', re.DOTALL)
    code_re = re.compile(r'^\s*kSTAF(\w+)\s*=\s*(\d+)', re.MULTILINE)

    m = block_re.search(text)
    if m is None:
        raise ValueError('Error code block not found!')
    block = m.group(0)

    codes = {} # { int(code) : 'ConstName' }
    for m in code_re.finditer(block):
        name, code = m.group(1, 2)
        code = int(code)
        if code in codes:
            raise ValueError('Duplicate error code? %d' % code)

        codes[code] = name

    return codes

def get_error_descriptions():
    with STAF.Handle('mkerrors') as h:
        resp = h.submit('local', 'help', 'list errors')

    codes = {}
    for r in resp:
        code = r['returnCode']
        desc = r['description']

        # Deal with the '+' that gets put at the end of 4000:
        if code.endswith('+'):
            code = code[:-1]
        code = int(code)

        if code in codes:
            raise ValueError('Duplicate error code? %d' % code)

        codes[code] = desc

    return codes

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    if len(args) != 1:
        print('One argument required, path to STAFError.h', file=sys.stderr)

    # Collect error names from STAFError.h
    text = open(args[0]).read()
    code_names = read_errors(text)

    # Collect error descriptions from HELP service
    code_descriptions = get_error_descriptions()

    name_len = max([len(name) for name in code_names.values()]) + 4

    for (code, name) in sorted(code_names.items()):
        description = code_descriptions.pop(code, None)
        if description is None:
            raise Exception('No description found for error %r' % name)

        name_str = "'%s'," % name
        print("    %-4d : (%-*s%r)," % (code, name_len, name_str, description))

    return 0

if __name__ == '__main__':
    sys.exit(main())
